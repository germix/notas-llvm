(self.webpackChunkllvm_notas=self.webpackChunkllvm_notas||[]).push([[811],{1144:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var a=n(2122),r=n(9756),l=(n(7294),n(3905)),o=["components"],d={},i="Literales",s={unversionedId:"literals",id:"literals",isDocsHomePage:!1,title:"Literales",description:"Enteros",source:"@site/docs/literals.md",sourceDirName:".",slug:"/literals",permalink:"/notas-llvm/docs/literals",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"B\xe1sico",permalink:"/notas-llvm/docs/basic"}},u=[{value:"Enteros",id:"enteros",children:[{value:"Obtener un entero de 1-bit (booleano)",id:"obtener-un-entero-de-1-bit-booleano",children:[]},{value:"Obtener un entero de 8-bit",id:"obtener-un-entero-de-8-bit",children:[]},{value:"Obtener un entero de 16-bit",id:"obtener-un-entero-de-16-bit",children:[]},{value:"Obtener un entero de 32-bit",id:"obtener-un-entero-de-32-bit",children:[]},{value:"Obtener un entero de 64-bit",id:"obtener-un-entero-de-64-bit",children:[]}]},{value:"Flotantes",id:"flotantes",children:[{value:"Obtener un flotante de 32-bit",id:"obtener-un-flotante-de-32-bit",children:[]},{value:"Obtener un flotante de 64-bit",id:"obtener-un-flotante-de-64-bit",children:[]}]},{value:"Arrays",id:"arrays",children:[{value:"Array de enteros de 8-bit",id:"array-de-enteros-de-8-bit",children:[]},{value:"Array de enteros de 16-bit",id:"array-de-enteros-de-16-bit",children:[]},{value:"Array de enteros de 32-bit",id:"array-de-enteros-de-32-bit",children:[]},{value:"Array de enteros de 64-bit",id:"array-de-enteros-de-64-bit",children:[]},{value:"Array de flotantes de 32-bit",id:"array-de-flotantes-de-32-bit",children:[]},{value:"Array de flotantes de 64-bit",id:"array-de-flotantes-de-64-bit",children:[]},{value:"Array de caracteres",id:"array-de-caracteres",children:[]}]},{value:"Alternativas para enteros",id:"alternativas-para-enteros",children:[]}],c={toc:u};function p(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"literales"},"Literales"),(0,l.kt)("h2",{id:"enteros"},"Enteros"),(0,l.kt)("h3",{id:"obtener-un-entero-de-1-bit-booleano"},"Obtener un entero de 1-bit (booleano)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"llvm::ConstantInt* integerConstant = llvm::ConstantInt::get(builder.getInt1Ty(), value, isSigned);\n")),(0,l.kt)("h3",{id:"obtener-un-entero-de-8-bit"},"Obtener un entero de 8-bit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"llvm::ConstantInt* integerConstant = llvm::ConstantInt::get(builder.getInt8Ty(), value, isSigned);\n")),(0,l.kt)("h3",{id:"obtener-un-entero-de-16-bit"},"Obtener un entero de 16-bit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"llvm::ConstantInt* integerConstant = llvm::ConstantInt::get(builder.getInt16Ty(), value, isSigned);\n")),(0,l.kt)("h3",{id:"obtener-un-entero-de-32-bit"},"Obtener un entero de 32-bit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"llvm::ConstantInt* integerConstant = llvm::ConstantInt::get(builder.getInt32Ty(), value, isSigned);\n")),(0,l.kt)("h3",{id:"obtener-un-entero-de-64-bit"},"Obtener un entero de 64-bit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"llvm::ConstantInt* integerConstant = llvm::ConstantInt::get(builder.getInt64Ty(), value, isSigned);\n")),(0,l.kt)("h2",{id:"flotantes"},"Flotantes"),(0,l.kt)("h3",{id:"obtener-un-flotante-de-32-bit"},"Obtener un flotante de 32-bit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"llvm::ConstantFP* floatingConstant = llvm::ConstantFP::get(builder.getFloatTy(), value);\n")),(0,l.kt)("h3",{id:"obtener-un-flotante-de-64-bit"},"Obtener un flotante de 64-bit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"llvm::ConstantFP* floatingConstant = llvm::ConstantFP::get(builder.getDoubleTy(), value);\n")),(0,l.kt)("h2",{id:"arrays"},"Arrays"),(0,l.kt)("h3",{id:"array-de-enteros-de-8-bit"},"Array de enteros de 8-bit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"std::vector<uint8_t> data;\nllvm::Constant* arrayConstant = llvm::ConstantDataArray::get(context, data);\n")),(0,l.kt)("h3",{id:"array-de-enteros-de-16-bit"},"Array de enteros de 16-bit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"std::vector<uint16_t> data;\nllvm::Constant* arrayConstant = llvm::ConstantDataArray::get(context, data);\n")),(0,l.kt)("h3",{id:"array-de-enteros-de-32-bit"},"Array de enteros de 32-bit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"std::vector<uint32_t> data;\nllvm::Constant* arrayConstant = llvm::ConstantDataArray::get(context, data);\n")),(0,l.kt)("h3",{id:"array-de-enteros-de-64-bit"},"Array de enteros de 64-bit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"std::vector<uint64_t> data;\nllvm::Constant* arrayConstant = llvm::ConstantDataArray::get(context, data);\n")),(0,l.kt)("h3",{id:"array-de-flotantes-de-32-bit"},"Array de flotantes de 32-bit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"std::vector<float> data;\nllvm::Constant* arrayConstant = llvm::ConstantDataArray::get(context, data);\n")),(0,l.kt)("h3",{id:"array-de-flotantes-de-64-bit"},"Array de flotantes de 64-bit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"std::vector<double> data;\nllvm::Constant* arrayConstant = llvm::ConstantDataArray::get(context, data);\n")),(0,l.kt)("h3",{id:"array-de-caracteres"},"Array de caracteres"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'bool addNull = true;            // \xbfAgregar terminador nulo ( \'\\0\' ) ?\nconst char* value = "test";\n//const std::string value = "test";\n\nllvm::Constant* stringConstant = llvm::ConstantDataArray::getString(context, value, addNull);\n')),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"alternativas-para-enteros"},"Alternativas para enteros"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Obtener un entero de 1-bit (booleano)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"builder.getInt1(value);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Obtener un entero de 1-bit (booleano true)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"builder.getTrue();\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Obtener un entero de 1-bit (booleano false)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"builder.getFalse();\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Obtener un entero de 8-bit")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"builder.getInt8(value);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Obtener un entero de 16-bit")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"builder.getInt16(value);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Obtener un entero de 32-bit")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"builder.getInt32(value);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Obtener un entero de 64-bit")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"builder.getInt64(value);\n")))}p.isMDXComponent=!0}}]);